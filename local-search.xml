<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>量化第一篇</title>
    <link href="/2023/03/04/liang-hua-di-yi-pian/"/>
    <url>/2023/03/04/liang-hua-di-yi-pian/</url>
    
    <content type="html"><![CDATA[<h1 id="量化第一篇"><a href="#量化第一篇" class="headerlink" title="量化第一篇"></a>量化第一篇</h1><h2 id="一-背景和定义"><a href="#一-背景和定义" class="headerlink" title="一.背景和定义"></a>一.背景和定义</h2><p>  我们在训练模型的使用的是GPU,但我们是在低端设备上跑训练好的模型，比如手机还有我们在门口经常看到的人脸识别的机器。而低端设备内存小，有时候甚至没法支持浮点运算（比如寒武纪），这个时候就需要将模型压缩下，而量化就是其中一种模型压缩技术。</p><p></p><h2 id="二-量化方式"><a href="#二-量化方式" class="headerlink" title="二.量化方式"></a>二.量化方式</h2><blockquote><p>1.精度角度</p></blockquote><ul><li>训练后量化(PTQ, post training quantization)<br><br>先训练，然后量化</li><li>感知量化(QAT, quantization aware training)<br><br>边训练边量化<br><p>以上都是对权重和激活进行量化，其中PTQ量化是最常见的量化，而当发现PTQ量化的精度损失较大的时候，我们会使用QAT量化</p><p></p></li></ul><h2 id="三-两种量化的步骤"><a href="#三-两种量化的步骤" class="headerlink" title="三.两种量化的步骤"></a>三.两种量化的步骤</h2><blockquote><p>1.PTQ量化</p></blockquote><ul><li>准备训练好的模型，就是普通的训练然后保存模型，<br>建议使用只保存字典的方式</li><li>算子融合，将一些相邻层融合成一层，常见的融合有conv+bn,<br>conv+relu, conv+bn+relu, linear+bn等，这样会使<br>模型的性能提升（目前我不知道怎么就能提升性能了，感觉像是<br>减少了运算次数）</li><li>配置量化方式，可以配置量化的方式，是对称还是非对称，<br>是per-channel还是per-tensor等</li><li>将模型设置成量化模型</li><li>量化转换<blockquote><p>2.QAT量化</p></blockquote></li><li>准备未训练的模型</li><li>算子融合，将一些相邻层融合成一层，常见的融合有conv+bn,<br>conv+relu, conv+bn+relu, linear+bn等，这样会使<br>模型的性能提升（目前我不知道怎么就能提升性能了，感觉像是<br>减少了运算次数）</li><li>配置量化方式，可以配置量化的方式，是对称还是非对称，<br>是per-channel还是per-tensor等</li><li>将模型设置成量化模型</li><li>循环执行以下两步：<ul><li>训练</li><li>量化转换</li></ul></li></ul><h2 id="四-pytorch量化demo"><a href="#四-pytorch量化demo" class="headerlink" title="四.pytorch量化demo"></a>四.pytorch量化demo</h2><p>pytorch进行量化时，有两种工具可以选择，eager mode和torch.fx这里使用的是pytorch的eager mode方式，官方将eager mode模式归类为beta地位，而推崇用fx，但本人使用fx进行量化的时候，出现了精度损失很大的问题，所以这里暂时使用eagermode来量化</p><p></p><blockquote><p>1.PTQ量化</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.quantization<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> model_lenet <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># setting</span><br><br>PARAM_PATH = <span class="hljs-string">"models/lenet_proto35.pt"</span><br><br><span class="hljs-comment"># here we use gpu</span><br><span class="hljs-comment"># prepare the data</span><br>train_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">"data"</span>, train=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor(),<br>                                          download=<span class="hljs-literal">True</span>)<br>train_loader = torch.utils.data.DataLoader(train_data, batch_size=<span class="hljs-number">64</span>)<br><span class="hljs-comment"># example_inputs = (torch.randn(1, 3, 128, 128),)</span><br><span class="hljs-comment"># example_inputs = example_inputs.cuda()</span><br><br><span class="hljs-comment"># prepare the model</span><br>float_model = LeNet()<br><span class="hljs-comment"># float_model = float_model.cuda()</span><br>float_model.load_state_dict(torch.load(PARAM_PATH))  <span class="hljs-comment"># is map_location necessary?</span><br><br><span class="hljs-comment"># eager mode won't fuse when running prepare</span><br>float_model = torch.quantization.fuse_modules(float_model, [[<span class="hljs-string">"conv1"</span>, <span class="hljs-string">"relu1"</span>],<br>                                                            [<span class="hljs-string">"conv2"</span>, <span class="hljs-string">"relu2"</span>],<br>                                                            [<span class="hljs-string">"fc1"</span>, <span class="hljs-string">"relu3"</span>],<br>                                                            [<span class="hljs-string">"fc2"</span>, <span class="hljs-string">"relu4"</span>]])<br><br><span class="hljs-comment"># 量化模式(qnnpack is for tensor,fbgemm is for channel)</span><br><span class="hljs-comment"># fbgemm for x86 / qnnpack for arm, our server is x86(uname -a)</span><br><span class="hljs-comment"># model.qconfig = torch.quantization.get_default_qconfig(QUANT_BACKEND)</span><br>float_model.qconfig = torch.quantization.get_default_qconfig(<span class="hljs-string">'fbgemm'</span>)<br><span class="hljs-built_in">print</span>(float_model.qconfig)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calibrate</span>(<span class="hljs-params">model, data_loader</span>):  <span class="hljs-comment"># for calibration</span><br>    float_model.<span class="hljs-built_in">eval</span>()<br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> image, target <span class="hljs-keyword">in</span> data_loader:<br>            model(image)<br><br><br><span class="hljs-comment"># must be on cpu</span><br>prepared_model = torch.ao.quantization.prepare(float_model, inplace=<span class="hljs-literal">True</span>)<br><br><span class="hljs-built_in">print</span>(prepared_model)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'-'</span> * <span class="hljs-number">20</span> + <span class="hljs-string">'\n'</span>)<br><br>calibrate(float_model, train_loader)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'calibration done!\n'</span>)<br><br>quantized_model = torch.quantization.convert(prepared_model, inplace=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'PTQ done!\n'</span>)<br><br>torch.save(quantized_model.state_dict(), <span class="hljs-string">'models/lenet_quantized_eager.pt'</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"quantized model's params is saved"</span>)<br><br></code></pre></td></tr></tbody></table></figure><blockquote><p>2.QAT量化</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> model_lenet <span class="hljs-keyword">import</span> *<br><br>train_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">"data"</span>, train=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor(),<br>                                          download=<span class="hljs-literal">True</span>)<br>test_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">"data"</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                         download=<span class="hljs-literal">True</span>)<br>train_data_size = <span class="hljs-built_in">len</span>(train_data)<br>test_data_size = <span class="hljs-built_in">len</span>(test_data)<br><br>train_loader = torch.utils.data.DataLoader(train_data, batch_size=<span class="hljs-number">64</span>)<br>test_loader = torch.utils.data.DataLoader(test_data, batch_size=<span class="hljs-number">64</span>)<br>PARAM_PATH = <span class="hljs-string">"models/lenet_proto35.pt"</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_one_epoch</span>(<span class="hljs-params">model, optimizer, data_loader, test_loader, device, ntrain_batches, test_data_size</span>):<br><br>    <span class="hljs-keyword">return</span><br><br><br><span class="hljs-comment"># prepare for quantization</span><br>qat_model = LeNet()<br><span class="hljs-comment">#qat_model.load_state_dict(torch.load(PARAM_PATH))</span><br>qat_model = torch.quantization.fuse_modules(qat_model, [[<span class="hljs-string">"conv1"</span>, <span class="hljs-string">"relu1"</span>],<br>                                                        [<span class="hljs-string">"conv2"</span>, <span class="hljs-string">"relu2"</span>],<br>                                                        [<span class="hljs-string">"fc1"</span>, <span class="hljs-string">"relu3"</span>],<br>                                                        [<span class="hljs-string">"fc2"</span>, <span class="hljs-string">"relu4"</span>]])<br><br><span class="hljs-comment">#optimizer = torch.optim.SGD(qat_model.parameters(), lr = 0.0001)</span><br>learning_rate = <span class="hljs-number">1e-2</span><br>optimizer = torch.optim.SGD(qat_model.parameters(), lr=learning_rate)<br>qat_model.qconfig = torch.ao.quantization.get_default_qat_qconfig(<span class="hljs-string">'fbgemm'</span>)<br>qat_model = torch.ao.quantization.prepare_qat(qat_model, inplace=<span class="hljs-literal">True</span>)<br><br><br><span class="hljs-comment"># QAT quantization</span><br>epoch = <span class="hljs-number">91</span><br><span class="hljs-comment"># QAT takes time and one needs to train over a few epochs.</span><br><span class="hljs-comment"># Train and check accuracy after each epoch</span><br><span class="hljs-keyword">for</span> nepoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoch):<br>    qat_model.train()<br>    qat_model.cuda()<br>    cnt = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> train_loader:<br>        cnt += <span class="hljs-number">1</span><br>        image, target = data<br>        output = qat_model(image.cuda())<br>        criterion = nn.CrossEntropyLoss()<br>        loss = criterion(output, target.cuda())<br>        optimizer.zero_grad()<br>        loss.backward()<br>        optimizer.step()<br><br>    <span class="hljs-keyword">if</span> nepoch &gt; <span class="hljs-number">3</span>:<br>        <span class="hljs-comment"># Freeze quantizer parameters</span><br>        qat_model.apply(torch.ao.quantization.disable_observer)<br>    <span class="hljs-keyword">if</span> nepoch &gt; <span class="hljs-number">2</span>:<br>        <span class="hljs-comment"># Freeze batch norm mean and variance estimates</span><br>        qat_model.apply(torch.nn.intrinsic.qat.freeze_bn_stats)<br><br>    <span class="hljs-comment"># Check the accuracy after each epoch</span><br>    qat_model = qat_model.to(<span class="hljs-string">'cpu'</span>)<br>    quantized_model = torch.quantization.convert(qat_model, inplace=<span class="hljs-literal">False</span>)<br><br><span class="hljs-comment"># if I move the quantized model to gpu, there's a segmental error appeared.why??? can't quantized model run on gpu</span><br><span class="hljs-comment"># when using pytorch?</span><br>    quantized_model.<span class="hljs-built_in">eval</span>()<br>    correct_num = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_loader:<br>            imgs, targets = data<br>            output = quantized_model(imgs)<br>            test_output = output.argmax(<span class="hljs-number">1</span>)<br>            correct_num = correct_num + (test_output == targets).<span class="hljs-built_in">sum</span>()<br>        correct_rate = correct_num / test_data_size<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'Epoch {} :Evaluation accuracy is {}'</span>.<span class="hljs-built_in">format</span>(nepoch, correct_rate))<br><br>    <span class="hljs-keyword">if</span> nepoch &gt;= <span class="hljs-number">40</span> <span class="hljs-keyword">and</span> nepoch % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>:<br>        torch.save(quantized_model.state_dict(), <span class="hljs-string">'models/lenet_quantized_eagerQAT'</span>+<span class="hljs-built_in">str</span>(nepoch)+<span class="hljs-string">'.pt'</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"quantized model's params is saved"</span>)<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>量化</tag>
      
      <tag>模型压缩</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>html5学习笔记</title>
    <link href="/2022/12/08/html5-xue-xi-bi-ji/"/>
    <url>/2022/12/08/html5-xue-xi-bi-ji/</url>
    
    <content type="html"><![CDATA[<h1 id="html5学习笔记"><a href="#html5学习笔记" class="headerlink" title="html5学习笔记"></a>html5学习笔记</h1><h2 id="一-基本结构"><a href="#一-基本结构" class="headerlink" title="一.基本结构"></a>一.基本结构</h2><blockquote><p>1.包括要素</p></blockquote><ul><li>头标签head  </li><li>内容标签body  </li><li>参数标签meta</li></ul><blockquote><p>2.例子</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- ctrl+/是快捷键 --&gt;</span><br><br><span class="hljs-comment">&lt;!-- DOCTYPE 告诉浏览器我们要使用什么规范 --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-comment">&lt;!-- meta标签用来描述网站的一些信息 --&gt;</span><br><span class="hljs-comment">&lt;!-- meta一般用来做SEO --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"keywords"</span>, <span class="hljs-attr">content</span>=<span class="hljs-string">"现在是晚上11点45分"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"description"</span>, <span class="hljs-attr">content</span>=<span class="hljs-string">"我在看狂神html"</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>风清扬<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>Surprise, mother fucker, Dexter!!!<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="二-基本标签"><a href="#二-基本标签" class="headerlink" title="二.基本标签"></a>二.基本标签</h2><blockquote><p>1.包括元素</p></blockquote><ul><li>标题h  </li><li>段落p  </li><li>水平线hr  </li><li>换行br  </li><li>粗体strong 斜体em</li><li>特殊符号<ul><li>空格 <code>&amp;nbsp;</code></li><li>大于 <code>&amp;t; </code> 小于<code>&amp;lt;</code></li><li>版权 <code>&amp;copy; </code></li></ul></li></ul><blockquote><p>2.例子</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--1标题标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>一级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>二级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>三级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--2段落标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>谢谢!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--3水平线标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--4换行标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--5粗体、斜体--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>这是粗体<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>这是斜体<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!--6特殊符号, &amp;开头--&gt;</span><br>空格<span class="hljs-symbol">&amp;nbsp;</span><br>大于号<span class="hljs-symbol">&amp;gt;</span><br>小于号<span class="hljs-symbol">&amp;lt;</span><br>版权<span class="hljs-symbol">&amp;copy;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="三-图片标签"><a href="#三-图片标签" class="headerlink" title="三.图片标签"></a>三.图片标签</h2><blockquote><p>1.包括元素</p></blockquote><ul><li>图片img<ul><li>src 图片的绝对路径、相对路径 或 url</li><li>alt 图片加载失败时识别图片的文字</li></ul></li></ul><blockquote><p>2.例子</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--img学习</span><br><span class="hljs-comment">主要参数：</span><br><span class="hljs-comment">  src:图片的绝对路径、相对路径 或 网络地址</span><br><span class="hljs-comment">  alt:图片加载失败时识别图片的文字</span><br><span class="hljs-comment">非必要参数：</span><br><span class="hljs-comment">  title:鼠标指着图片时显示的文字</span><br><span class="hljs-comment">完整参数：</span><br><span class="hljs-comment">  https://www.runoob.com/tags/tag-img.html</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../resources/image/dinosaur.png"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"恐龙"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"恐龙"</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="四-链接标签"><a href="#四-链接标签" class="headerlink" title="四.链接标签"></a>四.链接标签</h2><blockquote><p>1.包括元素</p></blockquote><ul><li>链接a<ul><li>href 必填，表示将要跳转的链接或者html页面</li><li>target 网页打开的方式</li></ul></li><li>锚链接</li><li>功能性链接<blockquote><p>2.例子</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--0.锚标记，顶部--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"id_4top"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--1.a标签</span><br><span class="hljs-comment">href： 必填，表示将要跳转的链接或者html页面</span><br><span class="hljs-comment">target： 网页打开的位置</span><br><span class="hljs-comment">_blank： 新标签中打开</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://innovatedmonster.github.io"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span>&gt;</span>我的博客<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://innovatedmonster.github.io"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../resources/image/blog.jpg"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"奇异人生"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"1280"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"720"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--2.锚链接</span><br><span class="hljs-comment">(1)需要一个锚标记，一般用id</span><br><span class="hljs-comment">(2)跳转到标记</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#id_4top"</span>&gt;</span>回到顶部<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!--3.功能性链接</span><br><span class="hljs-comment">(1)邮件链接 mailto:</span><br><span class="hljs-comment">(2)qq推广(官网炸了)</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"mailto:1219341322@qq.com"</span>&gt;</span>通过邮件联系我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></li></ul><h2 id="五-列表标签"><a href="#五-列表标签" class="headerlink" title="五.列表标签"></a>五.列表标签</h2><blockquote><p>1.包括元素</p></blockquote><ul><li><p>有序列表ol</p><ul><li>表项li</li></ul></li><li><p>无序列表ul</p></li><li><p>自定义列表dl</p><ul><li>列表名称dt</li><li>列表项dd</li></ul></li></ul><blockquote><p>2.例子</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--1.有序列表--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第二<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第三<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!--2.无序列表</span><br><span class="hljs-comment">应用：导航、侧边栏</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第二<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第三<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!--3.自定义列表</span><br><span class="hljs-comment">dl: 标签</span><br><span class="hljs-comment">dt: 列表名称</span><br><span class="hljs-comment">dd: 列表项</span><br><span class="hljs-comment">应用：公司网站底部</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>自定义列表<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>第一<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>第二<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>第三<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="六-表格标签"><a href="#六-表格标签" class="headerlink" title="六.表格标签"></a>六.表格标签</h2><blockquote><p>1.包括元素</p></blockquote><ul><li>表格table<ul><li>行 tr</li><li>列 td</li></ul></li></ul><blockquote><p>2.例子</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--1.表格table</span><br><span class="hljs-comment">行 tr</span><br><span class="hljs-comment">列 td</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">border 边框距（已经摒弃并建议在CSS中使用）</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1px"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--2.跨列colspan--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"3"</span>&gt;</span>1,1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--3.跨行rowspan--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">"2"</span>&gt;</span>2,1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2,2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2,3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3,1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3,2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>html</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译安装caffe</title>
    <link href="/2022/12/06/bian-yi-an-zhuang-caffe-ji-qi-ji-ben-shi-yong/"/>
    <url>/2022/12/06/bian-yi-an-zhuang-caffe-ji-qi-ji-ben-shi-yong/</url>
    
    <content type="html"><![CDATA[<h1 id="编译安装caffe及其基本用法"><a href="#编译安装caffe及其基本用法" class="headerlink" title="编译安装caffe及其基本用法"></a>编译安装caffe及其基本用法</h1><h2 id="一-基本环境"><a href="#一-基本环境" class="headerlink" title="一.基本环境"></a>一.基本环境</h2><p>本文使用的基本环境是ubuntu18.04，python3.6和不使用GPU，已经更新过apt和安装了vim</p><h2 id="二-编译安装"><a href="#二-编译安装" class="headerlink" title="二.编译安装"></a>二.编译安装</h2><h3 id="1-下载源代码"><a href="#1-下载源代码" class="headerlink" title="1.下载源代码"></a>1.下载源代码</h3><ul><li>方式一 git克隆代码<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#在命令行窗口输入如下命令</span><br>git <span class="hljs-built_in">clone</span> https://github.com/BVLC/caffe.git<br></code></pre></td></tr></tbody></table></figure></li><li>方式二 到官网下载  <blockquote><p>浏览器访问<a href="https://github.com/BVLC/caffe">https://github.com/BVLC/caffe</a><br>下载代码</p></blockquote></li></ul><h3 id="2-安装依赖"><a href="#2-安装依赖" class="headerlink" title="2.安装依赖"></a>2.安装依赖</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#分别输入如下命令</span><br>apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev  \<br>libopencv-dev  libhdf5-serial-dev  protobuf-compiler<br><br>apt-get install --no-install-recommends libboost-all-dev<br><br>apt-get install libatlas-base-dev<br><br>apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev<br><br>apt-get install libhdf5-dev<br></code></pre></td></tr></tbody></table></figure><h3 id="3-配置Makefile-config"><a href="#3-配置Makefile-config" class="headerlink" title="3.配置Makefile.config"></a>3.配置Makefile.config</h3><ul><li>进入caffe根目录<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> caffe<br></code></pre></td></tr></tbody></table></figure></li><li>创建Makefile.config的初始文件<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">copy Makefile.config.example Makefile.config<br></code></pre></td></tr></tbody></table></figure></li><li>修改Makefile.config文件  <blockquote><p>python路径：  </p><blockquote><p>1.将<br>  <mark>#</mark>PYTHON_INCLUDE := /usr/include/python2.7 \<br>  <mark>#</mark>/usr/lib/python2.7/dist-packages/numpy/core/include<br>  注释掉（高亮的#是我们需要加的）<br>  2.对<br>   PYTHON_LIBRARIES := boost_python3 python3.<mark>6</mark>m \<br>  PYTHON_INCLUDE := /usr/include/python3.<mark>6</mark>m \<br>  /usr/<mark>local/</mark>lib/python3.<mark>6</mark>/dist-packages/numpy/core/include<br>  取消注释（原来以上内容每一行前面有#，只需要将#去掉）<br>  高亮部分就是需要添加或修改的地方</p></blockquote></blockquote><blockquote><p>库路径：</p><blockquote><p>将对应位置的内容改成<br>      INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include <mark>/usr/include/hdf5/serial/</mark><br>      LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib <mark>/usr/lib/x86_64-linux-gnu/hdf5/serial/</mark><br>      其中高亮部分就是我们需要添加的内容</p></blockquote></blockquote></li></ul><h3 id="4-编译和安装"><a href="#4-编译和安装" class="headerlink" title="4.编译和安装"></a>4.编译和安装</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">make all -j8  <br><br>make <span class="hljs-built_in">test</span> -j8  <br><br>make runtest -j8  <br><br>make pycaffe<br></code></pre></td></tr></tbody></table></figure><h2 id="三-基本用法"><a href="#三-基本用法" class="headerlink" title="三.基本用法"></a>三.基本用法</h2><ul><li>请自行百度caffe mnist，网上和《21天实战caffe》书中对应mnist数据集部分内容很像。如果条件允许，也可以看此书相应部分，里面讲的非常通俗易懂，在此不再赘述。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>caffe</tag>
      
      <tag>踩坑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="/2022/12/05/wo-de-di-yi-pian-bo-ke/"/>
    <url>/2022/12/05/wo-de-di-yi-pian-bo-ke/</url>
    
    <content type="html"><![CDATA[<p>2022.12.5上午，我花了四个小时搭建了第一个博客，好耶<span class="github-emoji"><span>😸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f638.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
    
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
